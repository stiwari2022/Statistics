def Harmonic_Mean(Data):
  LData=len(Data)
  C=0
  HM=0
  while (C<LData):
    HM=HM+1/Data[C]
    C=C+1
  HM=LData/HM
  return HM

def Standard_Deviation(Data):
  LData=len(Data)
  C=0
  HM=0
  while (C<LData):
    HM=HM+1/Data[C]
    C=C+1
  HM=LData/HM
  V=sum((XOR-HM)**2 for XOR in Data)/LData
  SD=round(V**0.5, 3)
  return SD

def Removing_Outliers(Data, EL):
  MData=Harmonic_Mean(Data)
  SData=Standard_Deviation(Data)
  Up=MData+SData*2
  Down=MData-SData*2
  Max=max(Up, Down)
  Min=min(Up, Down)

  #Placing the index of the outliers in EL
  LData=len(Data)
  C=0
  while (C<LData):
    N=Data[C]
    if (N>Max or N<Min):
      EL.append(C)
    C=C+1

  #Removing the outliers
  LEL=len(EL)
  C=0
  while (C<LEL):
    Data.remove(Data[EL[C]-C])
    C=C+1
